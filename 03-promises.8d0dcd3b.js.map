{"mappings":"iiBAkCA,IAAAA,EAAAC,EAAA,SACMC,EAASC,SAASC,cAAc,SAEtC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAiCPL,EAAOY,iBAAiB,UA7BxB,SAAsBC,GACpBA,EAAEC,iBAMF,IAJA,IAAMC,EAAQC,OAAOhB,EAAOiB,SAASZ,MAAMa,OACrCC,EAAOH,OAAOhB,EAAOiB,SAASE,KAAKD,OACnCE,EAASJ,OAAOhB,EAAOiB,SAASG,OAAOF,OAEpCG,EAAI,EAAGA,EAAID,EAAQC,GAAK,EAAG,CAIlClB,EAHekB,EAAI,EACAN,EAAQI,EAAOE,GAG/BC,MACC,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,M,OACXmB,EAAA1B,GAAS2B,OAAOC,QACd,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAKnDuB,OAAM,SAAAL,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MAClBmB,EAAA1B,GAAS2B,OAAOI,QACd,sBAAuCF,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["// Задание 3 - генератор промисов\n// Выполняй это задание в файлах 03 - promises.html и 03 - promises.js.\n// Посмотри демо видео работы генератора промисов.\n// В HTML есть разметка формы, в поля которой пользователь будет вводить\n// первую задержку в миллисекундах, шаг увеличения задержки для каждого промиса\n// после первого и количество промисов которое необходимо создать.\n// Напиши скрипт, который при сабмите формы вызывает функцию createPromise(position, delay)\n//  столько раз, сколько ввели в поле amount.При каждом вызове передай ей номер создаваемого\n// промиса(position) и задержку учитывая введенную пользователем первую задержку(delay)\n// и шаг(step).\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n// Дополни код функции createPromise так, чтобы она возвращала один промис, который выполянется\n// или отклоняется через delay времени.Значением промиса должен быть объект, в котором будут\n// свойства position и delay со значениями одноименных параметров.Используй начальный код функции\n// для выбора того, что нужно сделать с промисом - выполнить или отклонить.\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n// Библиотека уведомлений\n// ⚠️ Следующий функционал не обязателен при сдаче задания, но будет хорошей дополнительной\n// практикой.\n// Для отображения уведомлений пользователю вместо console.log() используй библиотеку notiflix.\n\nimport Notiflix from 'notiflix';\nconst formEl = document.querySelector('.form');\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n\n  const delay = Number(formEl.elements.delay.value);\n  const step = Number(formEl.elements.step.value);\n  const amount = Number(formEl.elements.amount.value);\n\n  for (let i = 0; i < amount; i += 1) {\n    let position = i + 1;\n    let currentDelay = delay + step * i;\n\n    createPromise(position, currentDelay)\n      .then(\n        ({ position, delay }) =>\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          )\n        // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`)\n      )\n\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n\nformEl.addEventListener('submit', onFormSubmit);\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","e","preventDefault","delay1","Number","elements","value","step","amount","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.8d0dcd3b.js.map"}